// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  name     String
  profile  Profile?
  events   Event[]   @relation("EventOrganizer")
  rsvps    RSVP[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  bio         String?
  avatarUrl   String?
  phoneNumber String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String
  date        DateTime
  organizerId String
  organizer   User     @relation("EventOrganizer", fields: [organizerId], references: [id])
  rsvps       RSVP[]
  tags        Tag[]   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RSVP {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  status  RSVPStatus

  @@unique([userId,eventId])
}

model Tag {
  id      String @id @default(uuid())
  name    String
  eventId String
  event   Event @relation(fields: [eventId], references: [id])
}

enum RSVPStatus {
  GOING
  MAYBE
  NOT_GOING
}
